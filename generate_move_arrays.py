def generate_move_arrays(distance, to_move, cap):
	if distance == 0:
		if cap:
			return [[1]]
		else:
			return []

	elif distance == 1:
		if to_move == 0:
			return []
		elif to_move == 1:
			return [[1]]
		elif to_move == 2:
			if cap:
				return [[1], [2], [1, 1]]
			else:
				return [[1], [2]]

		elif to_move == 3:
			if cap:
				return [[1], [2], [3], [1, 1], [2, 1]]
			else:
				return [[1], [2], [3]]
		elif to_move == 4:
			if cap:
				return [[1], [2], [3], [4], [1, 1], [2, 1], [3, 1]]
			else:
				return [[1], [2], [3], [4]]
		elif to_move >= 5:
			if cap:
				return [[1], [2], [3], [4], [5], [1, 1], [2, 1], [3, 1], [4, 1]]
			else:
				return [[1], [2], [3], [4], [5]]		
	elif distance == 2:
		if to_move == 0:
			return []
		elif to_move == 1:
			return [[1]]
		elif to_move == 2:
			return [[1], [2], [1, 1]]
		elif to_move == 3:
			if cap:
				return [[1], [2], [3], [1, 1], [1, 2], [2, 1], [1, 1, 1]]
			else:
				return [[1], [2], [3], [1, 1], [1, 2], [2, 1]]
		elif to_move == 4:
			if cap:
				return [[1], [2], [3], [4], [1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [3, 1], [1, 1, 1], [1, 2, 1], [2, 1, 1]]
			else:
				return [[1], [2], [3], [4], [1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [3, 1]]
		elif to_move >= 5:
			if cap:
				return [[1], [2], [3], [4], [5], [1, 1], [1, 2], [1, 3], [1, 4], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [4, 1], [1, 1, 1], [1, 2, 1], [1, 3, 1], [2, 1, 1], [2, 2, 1], [3, 1, 1]]
			else:
				return [[1], [2], [3], [4], [5], [1, 1], [1, 2], [1, 3], [1, 4], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [4, 1]]				
	elif distance == 3:
		if to_move == 0:
			return []
		elif to_move == 1:
			return [[1]]
		elif to_move == 2:
			return [[1], [2], [1, 1]]
		elif to_move == 3:
			return [[1], [2], [3], [1, 1], [1, 2], [2, 1], [1, 1, 1]]
		elif to_move == 4:
			if cap:
				return [[1], [2], [3], [4], [1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [3, 1], [1, 1, 1], [1, 1, 2], [1, 2, 1], [2, 1, 1], [1, 1, 1, 1]]
			else:
				return [[1], [2], [3], [4], [1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [3, 1], [1, 1, 1], [1, 1, 2], [1, 2, 1], [2, 1, 1]]
		elif to_move >= 5:
			if cap:
				return [[1], [2], [3], [4], [5], [1, 1], [1, 2], [1, 3], [1, 4], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [4, 1], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 1], [1, 2, 2], [1, 3, 1], [2, 1, 1], [2, 1, 2], [2, 2, 1], [3, 1, 1], [1, 1, 1, 1], [1, 1, 2, 1], [1, 2, 1, 1], [2, 1, 1, 1]]
			else:
				return [[1], [2], [3], [4], [5], [1, 1], [1, 2], [1, 3], [1, 4], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [4, 1], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 1], [1, 2, 2], [1, 3, 1], [2, 1, 1], [2, 1, 2], [2, 2, 1], [3, 1, 1]]

	elif distance >= 4:
		if to_move == 0:
			return []
		elif to_move == 1:
			return [[1]]
		elif to_move == 2:
			return [[1], [2], [1, 1]]
		elif to_move == 3:
			return [[1], [2], [3], [1, 1], [1, 2], [2, 1], [1, 1, 1]]
		elif to_move == 4:
			return [[1], [2], [3], [4], [1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [3, 1], [1, 1, 1], [1, 1, 2], [1, 2, 1], [2, 1, 1], [1, 1, 1, 1]]
		elif to_move >= 5:
			if cap:
				return [[1], [2], [3], [4], [5], [1, 1], [1, 2], [1, 3], [1, 4], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [4, 1], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 1], [1, 2, 2], [1, 3, 1], [2, 1, 1], [2, 1, 2], [2, 2, 1], [3, 1, 1], [1, 1, 1, 1], [1, 1, 1, 2], [1, 1, 2, 1], [1, 2, 1, 1], [2, 1, 1, 1]]
			else:
				return [[1], [2], [3], [4], [5], [1, 1], [1, 2], [1, 3], [1, 4], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [4, 1], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 1], [1, 2, 2], [1, 3, 1], [2, 1, 1], [2, 1, 2], [2, 2, 1], [3, 1, 1], [1, 1, 1, 1], [1, 1, 1, 2], [1, 1, 2, 1], [1, 2, 1, 1], [2, 1, 1, 1]]